{
  
    
        "post0": {
            "title": "Title",
            "content": "Quels sont les facteurs de risques pouvant entraîner une prématurité chez les femmes enceintes? . from google.colab import files files.download(&#39;/content/photo-bebe.jpg&#39;) . Le but de ce projet était de créer un dashboard permettant de visualiser des données de notre choix. Celui-ci s&#39;est porté sur un jeu de données spécifique. Dans le cadre d’une étude sur les facteurs prénataux liés à un accouchement prématuré chez les femmes déjà en travail prématuré, on dispose de 13 variables explicatives sur 388 femmes incluses dans l&#39;étude. Les variables sont les suivantes : . from google.colab import files files.download(&#39;/content/Prema.png&#39;) . Nous avons crée une pop up sur notre application permettant d&#39;accéder au dictionnaire des données ci-dessus qui permettra d&#39;avoir des précisions sur les différentes variables ainsi que sur leurs modalités. . Ensuite, nous avons décidé de créer des filtres, nous permettant de choisir différentes modalités de certaines variables. Par exemple, comme présenté ci-dessous, nous avons décidé de filtrer les données en fonction d&#39;une grossesse prématurée ou non. Nous pourrons donc choisir d&#39;afficher la modalité Positif ou Négatif correspondant à la variable. Ensuite, nous pouvons également trier nos données en fonction du type de grossesse. Nous pourrons donc choisir si nous voulons affichier les données correspondant à une grossesse simple ou multiple. Enfin, les données peuvent être filtrées en fonction de si la femme enceinte présente des contractions ou pas. . from google.colab import files files.download(&#39;/content/Filtres.png&#39;) . Ensuite, nous pouvons également choisir l&#39;âge de la mère, à l&#39;aide d&#39;un curseur comme ci-dessous: . from google.colab import files files.download(&#39;/content/curseur_age.png&#39;) . Sur l&#39;image précédente, nous avons sélectionné les femmes enceintes agées entre 18 et 24 ans. . Ensuite, lorsque nous avons sélectionné les différents filtres voulus, nous pouvons choisir la variable que nous voulons afficher. Nous avons donc crée une liste déroulante comme ci-dessous: . from google.colab import files files.download(&#39;/content/curseur_age.png&#39;) . Si nous sélectionnons des filtres qui ne possèdent pas de données, nous avons affiché un message comme ci-dessous: . from google.colab import files files.download(&#39;/content/Aucune_donnee.png&#39;) . Au début de notre projet, nous avons rencontré quelques difficultés. Nous avons commencé à coder notre projet en flask, puis nous avons remarqué que c&#39;était plus compliqué et plus long. Nous avons donc décidé de passer en dash. .",
            "url": "https://oh-ce-cours.github.io/2021_polytech_gis4_AL_rapports/2021/06/19/prematures.html",
            "relUrl": "/2021/06/19/prematures.html",
            "date": " • Jun 19, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "test projet ! .",
            "url": "https://oh-ce-cours.github.io/2021_polytech_gis4_AL_rapports/2021/06/19/Blog_projet_archi.html",
            "relUrl": "/2021/06/19/Blog_projet_archi.html",
            "date": " • Jun 19, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Projet Architecture Logicielle",
            "content": "Fait par : Carina Faria Leitao, Emma Bulone et Rachid Boulkhir . Enseignant : Matthieu Falce . import plotly.express as px import pandas as pd import numpy as np import plotly.graph_objects as go import warnings warnings.filterwarnings(&#39;ignore&#39;) . Pr&#233;sentation des donn&#233;es . Le jeu de données utilisé pour ce projet : . df = pd.read_csv(&quot;https://raw.githubusercontent.com/datasets/covid-19/master/data/countries-aggregated.csv&quot;) df.head() . Date Country Confirmed Recovered Deaths . 0 2020-01-22 | Afghanistan | 0 | 0 | 0 | . 1 2020-01-23 | Afghanistan | 0 | 0 | 0 | . 2 2020-01-24 | Afghanistan | 0 | 0 | 0 | . 3 2020-01-25 | Afghanistan | 0 | 0 | 0 | . 4 2020-01-26 | Afghanistan | 0 | 0 | 0 | . Sur le tableau de données ci-dessus , on peut voir les différentes variables utilisées dans notre dashboard : . Date : Date à laquelle la personne a été déclarée positive au Covid-19 | Country : Le pays dans lequel la personne habite | Confirmed : Nombre de cas positifs | Recovered : Nombre de cas guéris | Deaths : Nombre de décés | . On a décidé de réaliser un dashboard permettent de visualiser ces données par pays et par période d&#39;étude souhaitée. La page est composée de 3 éléments : . Un tableau des données groupé par pays sur lequel on peut : . Filtrer les données mais aussi sélectionner un pays et une colonne entre &quot;Deaths&quot;,&quot;Confirmed&quot; et &quot;Recoverd&quot; et le graphique en dessous se met alors à jour en conséquence Ce tableau possède également 2 colonnes réprésentants les taux de décés et de guérisons groupés par pays toujours. . | Un graphique changeant selon la sélection évoquée au niveau du tableau dans lequel on retrouve la ou les courbes correspondantes à l&#39;évolution du nombre de décés ou de guérisions pour le ou les pays sélectionnés dans le tableau. On peut également choisir la période d&#39;étude grâce aux deux cases situées près du graphique dans lesquelles on peut mettre une date de début et une date de fin. Le graphique se mettra à jour en conséquence des dates choisies, de la variable choisie (guérisons ou décés) au sein du tableau ainsi que du/des pays choisis au niveau de la carte. . | . Une carte sur laquelle on peut voir le nombre de décés avec une échelle selon laquelle au plus la couleur est foncée au plus le nombre de décés est important. Sur cette carte il est possible de selectionner un ou plusieurs pays ce qui permet d&#39;avoir une vision sur une liste restreinte de pays avec le graphique du nombre de décés/gueris qui se mettra alors à jour. | . Les difficult&#233;s rencontr&#233;es et solutions apport&#233;es durant la conception . Au cours du projet, nous avons rencontré quelques difficultés: . Tout d&#39;abord, dans la réalisation de la carte du monde afin que tous les pays soient bien reconnus, on a du trouver pour chaque pays son code ISO3. Pour cela on a créé un dictionnaire python qui permet d&#39;associer le libellé du pays à son code ISO3. . | De plus, dans la carte, au niveau de l&#39;échelle, il a fallu l&#39;adapter puisqu&#39;elle n&#39;était pas représentative du nombre réel de décés. Par exemple, lors de l&#39;affichage du nombre de décés dans chaque pays, le nombre de décés aux Etats-Unis par rapport à sa population totale est complétement différents du nombre de décés en France par rapport à sa population totale. Pour corriger cette mauvaise représentation, nous avons decidé de passer au log. Dans la carte les données sont alors passées au log par contre l&#39;échelle est quand à elle est basée sur les valeurs réelles. . | Nous avons eu des difficultés pour garder une échelle en valeurs réelles alors que la carte était passée au log. En effet, par défaut la librairie python met des valeurs passées au log comme sur la carte. Les manipulations pour corriger l&#39;échelle et la remettre en valeur réelle a été assez complexe à cause du manque d&#39;information dans la documentation de la librairie python (plotly). . | . Une autre solution à ce problème d&#39;échelle serait de réaliser une échelle sur laquelle on retrouve plutôt un taux de décés(nombre de décés/population totale du pays). . Pour la fonctionnalité &quot;sélection des pays sur la carte&quot;, nous avons constaté un disfonctionnement qui pour nous provient de la librairie plotly. En effet, lorsque nous essayons de selectionner un pays et tout de suite après on souhaite le déselectionner, cela ne fonctionne pas. La seule manière de désélectionner un pays sélectionné est de sélectionner un autre pays et ensuite de recliquer sur la pays que l&#39;on souhaitait désélectionner. . | Nous avons rencontrés également une petite difficulté lorsque nous sélectionnons une période à filtrer avec les input de dates nous ne pouvons plus sélectionner une ligne du tableau . | . Pr&#233;sentation de notre Dashboard . Le tableau . df_table=(df.groupby(&#39;Country&#39;) .agg({&#39;Confirmed&#39;:&#39;sum&#39;, &#39;Recovered&#39;: &#39;sum&#39;,&#39;Deaths&#39;:&#39;sum&#39;}) .reset_index()) df_table[&#39;% Recovered&#39;]=(100*(df_table[&#39;Recovered&#39;]/df_table[&#39;Confirmed&#39;])).map(&#39;{:,.2f} %&#39;.format) df_table[&#39;% Deaths&#39;]=(100*(df_table[&#39;Deaths&#39;]/df_table[&#39;Confirmed&#39;])).map(&#39;{:,.2f} %&#39;.format) df_table . Country Confirmed Recovered Deaths % Recovered % Deaths . 0 Afghanistan | 18697687 | 14661995 | 735510 | 78.42 % | 3.93 % | . 1 Albania | 22417004 | 16539333 | 424998 | 73.78 % | 1.90 % | . 2 Algeria | 30321708 | 20795483 | 905241 | 68.58 % | 2.99 % | . 3 Andorra | 2655485 | 2433642 | 34640 | 91.65 % | 1.30 % | . 4 Angola | 5484924 | 4274145 | 132667 | 77.93 % | 2.42 % | . ... ... | ... | ... | ... | ... | ... | . 189 Vietnam | 807187 | 560262 | 11313 | 69.41 % | 1.40 % | . 190 West Bank and Gaza | 48028298 | 43056695 | 510803 | 89.65 % | 1.06 % | . 191 Yemen | 1098378 | 579219 | 264342 | 52.73 % | 24.07 % | . 192 Zambia | 15609926 | 14536752 | 233136 | 93.13 % | 1.49 % | . 193 Zimbabwe | 7277307 | 6331888 | 269624 | 87.01 % | 3.70 % | . 194 rows × 6 columns . Il était pour nous nécéssaire de créer les deux indicateurs taux de décés et taux de guérisons. En effet, en voyant uniquement les volumes de décés ou de guérisons, on n&#39;a du mal à se rendre compte de l&#39;ampleur du phénomène et il est difficile de comparer deux pays entre eux sans ce rapporter à la taille de population de chacun des deux pays. . Sur le tableau dans l&#39;application, en haut de chaque colonne il est possible de filter et trier les données. . Le graphique . fig_default = px.line(df, x=&#39;Date&#39;, y=df[&quot;Deaths&quot;], color=df[&quot;Country&quot;] ) fig_default.show() . . . Il nous a semblait interressant de laisser libre choix à l&#39;utlisateur de la vision qu&#39;il souhaite étudiée : vision décés ou vision guérisons, quel pays il souhaite étudié et enfin sur quelle période il choisi d&#39;observer l&#39;évolution. . Vous pouvez voir ci dessous, les deux input qui permettent la selection de la période: . . Lorsque vous entrez une date de début et de fin dans ces input le graphique se met à jour mais la carte se met elle aussi à jour en conséquence. Par exemple, entre le 01/01/20 et 31/01/20 on ne retrouve que des données sur la Chine. . En effet, la Covid-19 n&#39;était présente qu&#39;en Chine sur cette période. . . La carte . Dans notre application, il est possible de selectionner un ou plusieurs pays comme évoqué précédemment avec le graphique qui se mettra alors à jour. Nous expliciterons comment nous avons développé cette partie intéractive dans la partie intéractivité du blog. . class smart_dict(dict): def __missing__(self, key): return key dict_to_iso_alpha = {&#39;Afghanistan&#39;: &#39;AFG&#39;, &#39;Albania&#39;: &#39;ALB&#39;, &#39;Algeria&#39;: &#39;DZA&#39;,&#39;Andorra&#39;:&#39;AND&#39;, &#39;Angola&#39;: &#39;AGO&#39;, &#39;Antigua and Barbuda&#39;:&#39;ATG&#39;, &#39;Argentina&#39;: &#39;ARG&#39;,&#39;Armenia&#39;:&#39;ARM&#39;, &#39;Australia&#39;: &#39;AUS&#39;, &#39;Austria&#39;: &#39;AUT&#39;, &#39;Azerbaijan&#39;:&#39;AZE&#39;,&#39;Bahamas&#39;:&#39;BHS&#39;, &#39;Bahrain&#39;: &#39;BHR&#39;, &#39;Bangladesh&#39;: &#39;BGD&#39;,&#39;Barbados&#39;:&#39;BRB&#39;, &#39;Belarus&#39;:&#39;BLR&#39;,&#39;Belgium&#39;: &#39;BEL&#39;,&#39;Belize&#39;:&#39;BLZ&#39;, &#39;Benin&#39;: &#39;BEN&#39;,&#39;Bhutan&#39;:&#39;BTN&#39;, &#39;Bolivia&#39;: &#39;BOL&#39;, &#39;Bosnia and Herzegovina&#39;: &#39;BIH&#39;, &#39;Botswana&#39;: &#39;BWA&#39;, &#39;Brazil&#39;: &#39;BRA&#39;,&#39;Brunei&#39;:&#39;BRN&#39;,&#39;Bulgaria&#39;: &#39;BGR&#39;, &#39;Burma&#39;:&#39;MMR&#39;,&#39;Burkina Faso&#39;: &#39;BFA&#39;, &#39;Burundi&#39;: &#39;BDI&#39;,&#39;Cabo Verde&#39;:&#39;CPV&#39;, &#39;Cambodia&#39;: &#39;KHM&#39;, &#39;Cameroon&#39;: &#39;CMR&#39;, &#39;Canada&#39;: &#39;CAN&#39;, &#39;Central African Republic&#39;: &#39;CAF&#39;, &#39;Chad&#39;: &#39;TCD&#39;, &#39;Chile&#39;: &#39;CHL&#39;, &#39;China&#39;: &#39;CHN&#39;, &#39;Colombia&#39;: &#39;COL&#39;, &#39;Comoros&#39;: &#39;COM&#39;, &#39;Congo (Kinshasa)&#39;: &#39;COD&#39;, &#39;Congo (Brazzaville)&#39;: &#39;COG&#39;, &#39;Costa Rica&#39;: &#39;CRI&#39;, &quot;Cote d&#39;Ivoire&quot;: &#39;CIV&#39;, &#39;Croatia&#39;: &#39;HRV&#39;, &#39;Cuba&#39;: &#39;CUB&#39;,&#39;Cyprus&#39;:&#39;CYP&#39;, &#39;Czechia&#39;: &#39;CZE&#39;, &#39;Denmark&#39;: &#39;DNK&#39;, &#39;Dominica&#39;:&#39;DMA&#39;,&#39;Djibouti&#39;: &#39;DJI&#39;, &#39;Dominican Republic&#39;: &#39;DOM&#39;, &#39;Ecuador&#39;: &#39;ECU&#39;, &#39;Egypt&#39;: &#39;EGY&#39;, &#39;El Salvador&#39;: &#39;SLV&#39;, &#39;Equatorial Guinea&#39;: &#39;GNQ&#39;, &#39;Eritrea&#39;: &#39;ERI&#39;, &#39;Estonia&#39;:&#39;EST&#39;,&#39;Ethiopia&#39;: &#39;ETH&#39;, &#39;Eswatini&#39;:&#39;SWZ&#39;,&#39;Fiji&#39;:&#39;FJI&#39;,&#39;Georgia&#39;:&#39;GEO&#39;,&#39;Grenada&#39;:&#39;GRD&#39;,&#39;Guyana&#39;:&#39;GUY&#39;, &#39;Finland&#39;: &#39;FIN&#39;, &#39;France&#39;: &#39;FRA&#39;, &#39;Gabon&#39;: &#39;GAB&#39;, &#39;Gambia&#39;: &#39;GMB&#39;, &#39;Germany&#39;: &#39;DEU&#39;, &#39;Ghana&#39;: &#39;GHA&#39;, &#39;Greece&#39;: &#39;GRC&#39;, &#39;Guatemala&#39;: &#39;GTM&#39;, &#39;Guinea&#39;: &#39;GIN&#39;, &#39;Guinea-Bissau&#39;: &#39;GNB&#39;, &#39;Haiti&#39;: &#39;HTI&#39;, &#39;Holy See&#39;:&#39;VAT&#39;, &#39;Honduras&#39;: &#39;HND&#39;, &#39;Hong Kong, China&#39;: &#39;HKG&#39;, &#39;Hungary&#39;: &#39;HUN&#39;, &#39;Iceland&#39;: &#39;ISL&#39;, &#39;India&#39;: &#39;IND&#39;, &#39;Indonesia&#39;: &#39;IDN&#39;, &#39;Iran&#39;: &#39;IRN&#39;, &#39;Iraq&#39;: &#39;IRQ&#39;, &#39;Ireland&#39;: &#39;IRL&#39;, &#39;Israel&#39;: &#39;ISR&#39;, &#39;Italy&#39;: &#39;ITA&#39;, &#39;Jamaica&#39;: &#39;JAM&#39;, &#39;Japan&#39;: &#39;JPN&#39;, &#39;Jordan&#39;: &#39;JOR&#39;, &#39;Kazakhstan&#39;:&#39;KAZ&#39;, &#39;Kenya&#39;: &#39;KEN&#39;, &#39;Kiribati&#39;:&#39;KIR&#39;,&#39;Korea, Dem. Rep.&#39;: &#39;PRK&#39;, &#39;Korea, South&#39;: &#39;KOR&#39;, &#39;Kosovo&#39;:&#39;XXK&#39;,&#39;Kyrgyzstan&#39;:&#39;KGZ&#39;, &#39;Kuwait&#39;: &#39;KWT&#39;,&#39;Laos&#39;:&#39;LAO&#39; ,&#39;Latvia&#39;:&#39;LVA&#39;,&#39;Lebanon&#39;: &#39;LBN&#39;, &#39;Lesotho&#39;: &#39;LSO&#39;, &#39;Liberia&#39;: &#39;LBR&#39;, &#39;Libya&#39;: &#39;LBY&#39;,&#39;Liechtenstein&#39;:&#39;LIE&#39;,&#39;Lithuania&#39;:&#39;LTU&#39;, &#39;Luxembourg&#39;:&#39;LUX&#39;, &#39;Madagascar&#39;: &#39;MDG&#39;, &#39;Malawi&#39;: &#39;MWI&#39;, &#39;Malaysia&#39;: &#39;MYS&#39;, &#39;Maldives&#39;:&#39;MDV&#39;,&#39;Mali&#39;: &#39;MLI&#39;,&#39;Malta&#39;:&#39;MLT&#39;,&#39;Marshall Islands&#39;:&#39;MHL&#39;, &#39;Mauritania&#39;: &#39;MRT&#39;, &#39;Mauritius&#39;: &#39;MUS&#39;, &#39;Mexico&#39;: &#39;MEX&#39;, &#39;Mongolia&#39;: &#39;MNG&#39;, &#39;Montenegro&#39;: &#39;MNE&#39;, &#39;Morocco&#39;: &#39;MAR&#39;, &#39;Mozambique&#39;: &#39;MOZ&#39;, &#39;Myanmar&#39;: &#39;MMR&#39;, &#39;Namibia&#39;: &#39;NAM&#39;, &#39;Nepal&#39;: &#39;NPL&#39;, &#39;Netherlands&#39;: &#39;NLD&#39;, &#39;New Zealand&#39;: &#39;NZL&#39;, &#39;Nicaragua&#39;: &#39;NIC&#39;, &#39;Niger&#39;: &#39;NER&#39;, &#39;Nigeria&#39;: &#39;NGA&#39;, &#39;Norway&#39;: &#39;NOR&#39;, &#39;Oman&#39;: &#39;OMN&#39;, &#39;Pakistan&#39;: &#39;PAK&#39;, &#39;Panama&#39;: &#39;PAN&#39;, &#39;Paraguay&#39;: &#39;PRY&#39;, &#39;Peru&#39;: &#39;PER&#39;, &#39;Philippines&#39;: &#39;PHL&#39;, &#39;Poland&#39;: &#39;POL&#39;, &#39;Portugal&#39;: &#39;PRT&#39;, &#39;Puerto Rico&#39;: &#39;PRI&#39;,&#39;Qatar&#39;:&#39;QAT&#39;, &#39;Reunion&#39;: &#39;REU&#39;, &#39;Romania&#39;: &#39;ROU&#39;, &#39;Russia&#39;:&#39;RUS&#39;,&#39;Rwanda&#39;: &#39;RWA&#39;, &#39;Sao Tome and Principe&#39;: &#39;STP&#39;, &#39;Saudi Arabia&#39;: &#39;SAU&#39;, &#39;Senegal&#39;: &#39;SEN&#39;, &#39;Serbia&#39;: &#39;SRB&#39;, &#39;Sierra Leone&#39;: &#39;SLE&#39;, &#39;Singapore&#39;: &#39;SGP&#39;, &#39;Slovak Republic&#39;: &#39;SVK&#39;, &#39;Slovenia&#39;: &#39;SVN&#39;, &#39;Somalia&#39;: &#39;SOM&#39;, &#39;South Africa&#39;: &#39;ZAF&#39;, &#39;Spain&#39;: &#39;ESP&#39;, &#39;Sri Lanka&#39;: &#39;LKA&#39;, &#39;Sudan&#39;: &#39;SDN&#39;, &#39;Swaziland&#39;: &#39;SWZ&#39;, &#39;Sweden&#39;: &#39;SWE&#39;, &#39;Switzerland&#39;: &#39;CHE&#39;, &#39;Syria&#39;: &#39;SYR&#39;, &#39;Taiwan&#39;: &#39;TWN&#39;, &#39;Tanzania&#39;: &#39;TZA&#39;, &#39;Thailand&#39;: &#39;THA&#39;, &#39;Togo&#39;: &#39;TGO&#39;, &#39;Trinidad and Tobago&#39;: &#39;TTO&#39;, &#39;Tunisia&#39;: &#39;TUN&#39;, &#39;Turkey&#39;: &#39;TUR&#39;, &#39;Uganda&#39;: &#39;UGA&#39;, &#39;United Kingdom&#39;: &#39;GBR&#39;, &#39;United Arab Emirates&#39;: &#39;ARE&#39;,&#39;US&#39;: &#39;USA&#39;, &#39;Uruguay&#39;: &#39;URY&#39;, &#39;Venezuela&#39;: &#39;VEN&#39;, &#39;Vietnam&#39;: &#39;VNM&#39;, &#39;West Bank and Gaza&#39;: &#39;PSE&#39;, &#39;Yemen&#39;: &#39;YEM&#39;, &#39;Zambia&#39;: &#39;ZMB&#39;, &#39;Zimbabwe&#39;: &#39;ZWE&#39;, &#39;Micronesia&#39;:&#39;FSM&#39;,&#39;Moldova&#39;:&#39;MDA&#39;,&#39;Monaco&#39;:&#39;MCO&#39;,&#39;North Macedonia&#39;:&#39;MKD&#39;,&#39;Papua New Guinea&#39;:&#39;PNG&#39;, &#39;Saint Kitts and Nevis&#39;:&#39;KNA&#39;,&#39;Saint Lucia&#39;:&#39;LCA&#39;,&#39;Saint Vincent and the Grenadines&#39;:&#39;VCT&#39;, &#39;Samoa&#39;:&#39;WSM&#39;,&#39;Vanuatu&#39;:&#39;VUT&#39;,&#39;San Marino&#39;:&#39;SMR&#39;, &#39;Seychelles&#39;:&#39;SYC&#39;, &#39;Slovakia&#39;:&#39;SVK&#39;, &#39;Solomon Islands&#39;:&#39;SLB&#39;, &#39;South Sudan&#39;:&#39;SSD&#39;, &#39;Suriname&#39;:&#39;SUR&#39;, &#39;Taiwan*&#39;:&#39;TWN&#39;, &#39;Tajikistan&#39;:&#39;TJK&#39;, &#39;Timor-Leste&#39;:&#39;TLS&#39;, &#39;Ukraine&#39;:&#39;UKR&#39;, &#39;Uzbekistan&#39;:&#39;UZB&#39;, &#39;Vanuatu&#39;:&#39;VUT&#39; } df__ = df.groupby([&quot;Country&quot;]).sum() df__[&quot;Country&quot;] = df__.index df__[&quot;ISO alpha-3&quot;] = df__[&quot;Country&quot;].map(smart_dict(dict_to_iso_alpha)) df__[&quot;Deaths in log10&quot;] = np.log10(df__[&quot;Deaths&quot;]) ticks = np.arange(2, 8.1, 1) fig_choropleth = go.Figure(data=go.Choropleth( locations=df__[&quot;Country&quot;].map(dict_to_iso_alpha), text=df__[&quot;Country&quot;], hoverinfo=&#39;text&#39;, z=df__[&quot;Deaths in log10&quot;], colorbar_tickvals=ticks, colorbar_title=&quot;Décès&quot;, colorscale=&quot;reds&quot;, colorbar_ticktext=[ &quot;100&quot; if p&lt;3 else &quot;{:d}k&quot;.format( int((10**(p-3))) ) if p&lt;6 else &quot;{:d}M&quot;.format( int((10**(p-6))) ) for p in ticks] ) ) fig_choropleth.update_geos(projection_type=&quot;natural earth&quot;) fig_choropleth.show() . . . Int&#233;ractivit&#233; de l&#39;application . Pour avoir le code plus détaillé sur cette partie intéractivité, nous vous invitions à vous rendre dans le code source de l&#39;applicaton. . 1&#232;re fonctionnalit&#233; int&#233;ractive : S&#233;lection des pays sur la carte . @app.callback( Output(&#39;datatable-interactivity&#39;, &#39;selected_rows&#39;), Output(&#39;map&#39;, &#39;figure&#39;), [Input(&quot;map&quot;, &quot;clickData&quot;)] ) def update_map(clickData): ... return list(selections), fig_choropleth . La fonction ci-dessus prend en entrée les pays sélectionnés sur la carte qui se trouvent dans l&#39;objet &#39;clickData&#39; . Ensuite, en sortie on a la carte mise à jour ainsi qu&#39;une sélection des pays sélectionnées sur la carte qui est faite au niveau du tableau. . 2e fonctionnalit&#233; int&#233;ractive : S&#233;lection de la colonne souhait&#233;e pour le graphique au niveau du tableau . def update_graph(selected_rows, selected_columns): ... return px.line(_df, x=&#39;Date&#39;, y=_df[selected_column], color=_df[&quot;Country&quot;], title=&quot;Evolution du nombre de décés&quot;) . Cette fonction prend en paramètre les lignes (correspondantes au pays) sélectionnées dans le tableau ou sur la carte. . En effet, l&#39;utilisateur a la possibilité de sélectionner un pays directement sur le tableau ou bien de choisir des pays sur le map. Dés lors où l&#39;utilisateur clique sur un pays du map, ce pays est alors coché au niveau du tableau. . Enfin, l&#39;utilisateur peut également sélectionner une des 2 colonnes (Deaths et Recovered) qu&#39;il souhaite observer sur le graphique. . Ensuite, la fonction renvoie le graphique mis à jour avec les paramètres (pays et variables ) demandés par l&#39;utilisateur. .",
            "url": "https://oh-ce-cours.github.io/2021_polytech_gis4_AL_rapports/2021/06/18/projet-EB-CFL-RB.html",
            "relUrl": "/2021/06/18/projet-EB-CFL-RB.html",
            "date": " • Jun 18, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Présentation de notre projet (Milhe Wahbi Bernard)",
            "content": "Comment expliquer le fait qu&#39;un jeu soit un véritable succès ?? . L&#39;Objectif de notre Projet . Du point de vue du projet, notre objectif est de réaliser un dashboard complet et fonctionnel qui permet aux utilisateurs de découvrir des statistiques sur notre dataset. En remplissant un formulaire l&#39;utilisateur doit pouvoir découvrir des statistiques enrichissantes sur les éléments qu&#39;il a saisi. . D&#39;un point de vue personnel, le but de l&#39;ensemble des collaborateurs était de : . Progresser dans les différents outils utilisés(JS,Python,Flask) | Travailler efficacement en équipe (Git, etc ...) | Réaliser un projet de bonne qualité, que l&#39;on pourrait mettre en avant par la suite. | . Un début chaotique : le choix du dataSet . Une des principales difficultées que nous avons rencontré durant ce projet a été le choix du dataset, ce choix nous a été compliqué pour différentes raisons: . La première raison de cette difficulté a été la volonté de travailler sur des données qui nous tiennent à cœur . Des données de santé ou encore météorologiques étaient assez facilement accessibles, mais ne nous intéressaient pas. | La deuxième difficulté rencontrée a été le manque d&#39;informations et de variables dans le jeu de données. Dans le but de faire un dashboard, avoir des données diverses et exploitables est quelque chose de nécessaire. | D&#39;autres difficultés, comme par exemple le format des données nous a fait perdre du temps également. | . Etant tous les 3 fans de jeux vidéos, nous avons donc décider de nous orienter vers une dataset qui recense les ventes de jeux vidéos assez complète pour être exploitable. . Globalement, le jeu de données recense les jeux vidéos , leurs genres, plateformes, éditeurs et leurs nombre de ventes en fonction des régions. . Elaboration de notre problématique : . La problématique qui nous intéresse dans notre cas est de savoir: &quot;Comment expliquer les ventes des jeux vidéos selon des critères diverses ? . Schématisation de notre site . Nous avons décider de créer un formulaire qui permet de trier sur: . les différents genres de jeux vidéos (via un select) . | les différentes plateformes de jeux vidéos (via un select) . | les différents éditeurs de jeux vidéos (via un select) . | l&#39;année de sortie de ces jeux vidéos (via un slider double) . | . Afin de pouvoir répondre à notre problématique, les graphes qui nous semblent judicieux sont , selon les filtres ci-dessus: . Un diagramme circulaire expliquant la répartition des ventes selon les régions. (Popularité des plateformes/genres selon les régions) . | Un diagramme en barre représentant les 5 editeurs qui ont le plus vendus. (Popularité des Editeurs) . | Un diagramme en barre représentant les plateformes qui ont le plus de critiques sur internet(Popularité globale des plateformes ) . | Un diagramme temporel qui indique les ventes selon les années de sortie (Popularité des plateformes et Genre dans le temps) . | . Mock réalisé avant la conception du site . . ** . Nettoyage des données: . Nous avons, pour le nettoyage des données, décider de: . Supprimer les lignes qui n&#39;avaient pas de Dates valides (Nan) | Supprimer les lignes qui ont ont des valeurs nulles pour les notes des critiques /utilisateurs uniquement au moment de la récupération des données pour notre graphe répertoriant le nombre de critiques. | . Architecture du logiciel: . . Répartition des classes: . Dans static/js: . dashboard.js (classe qui recoit la réponse des fonctions de api.js et qui grâce Ã ces informations appelle les classes de création de graphes dans graph.js) . | form.js (classe qui appelle les fonctions d&#39;update des graphs aprÃ¨s la validation du formulaire) . | utils: . api.js (classe js qui contient les requÃªtes post vers le serveur python) | graphs.js (classe js qui contient les fonctions responsables des créations de graphes) | . | element: . slider.js (classe JavaScript qui decrit le fonctionnement du slider) . element: . | . | . | Dans templates: . base.html et index.html qui sont les fichiers html de base . | partials: . dashboard.html (fichier html qui contient le code html des graphes) . | footer.html (fichier html qui contient le code html du footer) . | head.html (fichier html qui contient le code html du header et des scripts) . | form: . form_jv.html (fichier html qui contient le code html du formulaire) | . | . | . | . Exemple d&#39;update du graphe circulaire: . 1)Validation du formulaire . 2) Récupération dans form.js . {form.js} var message = new FormData() message.append(&quot;genre&quot;, document.getElementById(&quot;genre&quot;).value); message.append(&#39;platform&#39;, document.getElementById(&quot;platform&quot;).value); message.append(&#39;minYear&#39;, document.getElementById(&quot;minYear&quot;).value); message.append(&#39;maxYear&#39;, document.getElementById(&quot;maxYear&quot;).value); updatePublisherGraph(publisherGraph,message) updateSalesGraph(salesGraph,message) e.preventDefault() . 3) Modification du graphe dans dashboard.js . {dashboard.js} export async function updateSalesGraph(chart,message) { let sales = await getSales(message); if (sales !== null) { let labels = [] let sales_sum = [] for (const [key, value] of Object.entries(sales)) { labels.push(key) sales_sum.push(value) } chart.data.datasets[0].data = sales_sum; chart.data.labels = labels; chart.update(); } } . 4) Récupération des datas en getSales . {api.js} export async function getSales(message) { let res try { await axios.post(&#39;/api/get/sales&#39;, message) .then(function (response) { res=response.data }) .catch(function (error) { console.log(error); }); } catch (error) { console.error(error); return null } return res } . Réponse à notre problématique . Il est difficile de valider des réponses avec ce jeu de données et le peu de temps que l&#39;on a eu, mais il est possible d&#39;y extraire quelques informations: . On remarque notamment que certaines plateformes ont un succès bien plus élevé dans certaines régions. Nintendo vend, en proportion, bien plus au Japon que la plupart des autres éditeurs. Il serait donc conseillé pour Nintendo de ne pas négliger le marché Japonais et de le prendre en compte sérieusement.On peut le voir avec les ventes de la gameboy(a gauche) par rapport aux ventes de l&#39;ensembles des plateformes (à droite) | . . On peut également apercevoir que les ventes des jeux ont augmenté Ã certains moments (pics dans le graphe). Ces moments (2006 /2008) semblent correspondre aux sorties des grosses consoles .Logiquement les ventes des jeux sont bien plus élevés lors des sorties des grosses consoles. On peut voir également une baisse dans les dernières années. Cela s&#39;explique par le fait qu&#39;il y ait eu moins de temps pour acheter les jeux, il est donc nécessaire de laisser du temps aux jeux , car leurs ventes peuvent Ãªtre dans la durée . . | On peut également apercevoir que les consoles qui ont le plus de succès (PC,PS3,PS4) sont celles qui ont le plus de critiques sur le web. Les plateformes qui réussisent Ã avoir une communauté active sont celles qui vendent le plus.Pour les nouveaux éditeurs et concepteurs de plateformes , il est donc important de faire des jeux de qualité et d&#39;avoir une communauté active. . . | . Difficultés rencontrées . Nous avons été confronté Ã plusieurs problèmes: . Le premier problème a été de gérer les méthodes asynchrones afin de pouvoir visualiser toutes les données directement. | Le jeu de données a également posé problÃ¨me, car nous avons découvert au fur et à mesure des données aberrantes (Jeu Ds en 1985 ?), il y avait également beaucoup de données manquantes. Le nombre de lignes (16000), était très important également. . | Le nombre important de lignes a fait que générer un tableau pour rechercher des données était beaucoup trop long à charger . On a donc du créer une pagination coté serveur affin de pouvoir observer les données depuis le Dashboard à travers un tableau classé par nombre de ventes global . Nous avons eu beaucoup de problèmes de format de données et d’initialisation du tableau. . | Nous avons tenté d&#39;automatiser la création de l&#39;ensemble des graphes au sein d&#39;une méthode. Néamoins les petites différences entre l&#39;ensemble des graphes ont donné un rendu moins propre que celui souhaité. | . Ressenti sur le projet . De notre côté , nous avons beaucoup apprécié travailler sur ce projet, et de découvrir des nouvelles technologies. Le travail d&#39;équipe s&#39;est également très bien déroulé. . Cependant, nous avons trouvé que le temps prévu pour ce projet était un peu insuffisant afin de raliser un projet de meilleure qualité. .",
            "url": "https://oh-ce-cours.github.io/2021_polytech_gis4_AL_rapports/markdown/2021/06/18/Milhe-Wahbi-Bernard.html",
            "relUrl": "/markdown/2021/06/18/Milhe-Wahbi-Bernard.html",
            "date": " • Jun 18, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://oh-ce-cours.github.io/2021_polytech_gis4_AL_rapports/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://oh-ce-cours.github.io/2021_polytech_gis4_AL_rapports/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}